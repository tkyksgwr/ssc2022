#!/usr/bin/env python
# -*- coding:utf-8 -*-
import argparse
import configparser
import logging
import markdown2
import os
import pandas as pd
import sys

args = []

def main():
    global args
    args = parse_args()

    # logging
    if args.verbose:
        logging.basicConfig(level=logging.INFO)
    if args.Debug:
        logging.basicConfig(level=logging.DEBUG)
    
    config = read_config()
    config['defaults']['md'] = args.md
    show_config(config)

    df = read_md(config)

    df_res = count_by_player(config, df)

    df_res.to_csv(args.output)
    

def read_config():
    """ Read config file (ini)
    """

    global args

    if args.config:
        cfg = args.config
    else:
        cfg = os.path.abspath(__file__) + '.ini'
    
    if not os.path.isfile(cfg):
        raise Exception(cfg + ' does not exist.')
    
    config = configparser.ConfigParser()
    config.read(cfg)

    return config

def show_config(config):

    sections = config.sections()
    if sections:
        logging.debug('config.sections:')
        for key in sections:
            logging.debug('  {}'.format(key))
            for key2 in config[key]:
                logging.debug('    {} = {}'.format(key2, config[key][key2]))

def read_md(config):

    md = config['defaults']['md']

    # read md
    with open(md) as f:
        l = f.readlines()
        logging.debug(l) 

    # extract table
    lines = []
    for line in l:
        if '| 2022' in line:
            lines.append(line)

    logging.debug(lines) 

    # parse table
    results_2d_list = []
    for line in lines:
        _, p1, raw_score, p2, _ = line.split(' | ')
        #logging.debug("{} {} {}".format(p1, raw_score, p2))
        p1_score, p2_score = raw_score.split('-')
        p1_score = int(p1_score)
        p2_score = int(p2_score)
        if p1_score == p2_score:
            p1_win = 0
            p2_win = 0
        elif p1_score > p2_score:
            p1_win = 1
            p2_win = 0
        else:
            p1_win = 0
            p2_win = 1

        res = [p1, p2, p1_score, p2_score, p1_win, p2_win]
        logging.debug("{} {} {} {} {} {}".format(p1, p2, p1_score, p2_score, p1_win, p2_win))

        results_2d_list.append(res)
    
    df = pd.DataFrame(results_2d_list)
    df.columns = ['p1', 'p2', 'p1_score', 'p2_score', 'p1_win', 'p2_win']
    logging.debug(df)

    return df

def count_by_player(config, df):

    players = config['two']['members'].split('\n')
    logging.debug(players)

    results_2d_list = []
    for p in players:
        # Matches
        df_bool = (df == p)
        matches = df_bool.sum().sum()

        df_p1 = df[df['p1'] == p]
        logging.debug(df_p1)
        df_p2 = df[df['p2'] == p]
        logging.debug(df_p2)

        # Win
        df_p1_win_bool = (df_p1['p1_win'] == 1)
        p1_wins = df_p1_win_bool.sum().sum()
        logging.debug(df_p1_win_bool)
        
        df_p2_win_bool = (df_p2['p2_win'] == 1)
        p2_wins = df_p2_win_bool.sum().sum()
        logging.debug(df_p2_win_bool)
        wins = p1_wins + p2_wins

        # Lost
        df_p1_lost_bool = (df_p1['p1_win'] == 0)
        p1_losts = df_p1_lost_bool.sum().sum()
        logging.debug(df_p1_lost_bool)
        
        df_p2_lost_bool = (df_p2['p2_win'] == 0)
        p2_losts = df_p2_lost_bool.sum().sum()
        logging.debug(df_p2_lost_bool)
        losts = p1_losts + p2_losts

        # Win games
        p1_scores = df_p1['p1_score']
        p1_score = p1_scores.sum()
        p2_scores = df_p2['p2_score']
        p2_score = p2_scores.sum()
        logging.debug("{}, {}".format(p1_score, p2_score))
        win_games = p1_score + p2_score

        # Lost games
        p1_lost_scores = df_p1['p2_score']
        p1_lost_score = p1_lost_scores.sum()
        p2_lost_scores = df_p2['p1_score']
        p2_lost_score = p2_lost_scores.sum()
        logging.debug("{}, {}".format(p1_lost_score, p2_lost_score))
        lost_games = p1_lost_score + p2_lost_score

        res = [p, matches, wins, losts, win_games, lost_games]
        logging.debug("{}, {}, {}, {}, {}, {}".format(p, matches, wins, losts, win_games, lost_games))

        results_2d_list.append(res)

    df_res = pd.DataFrame(results_2d_list)
    df_res.columns = ['名前', '試合数', '勝', '敗', '得ゲーム数', '失ゲーム数']
    logging.debug(df_res)

    return df_res

# def get_teams():

#     teams = []
#     teams.append('チーム徳川家康')
#     teams.append('東京シティBoys')
#     teams.append('TUBE')
#     teams.append('お上品関西軍団')
#     teams.append('チーム桃太郎')
#     teams.append('チームNAHANAHA')
#     logging.debug(teams)

#     return teams

# def get_team_results(df):

#     teams = get_teams()

#     # Header
#     win_loss_str = "| {} | {} | {} | {} | {} | {} | {} | {} | {}|".format(
#         '---',
#         teams[0],
#         teams[1],
#         teams[2],
#         teams[3],
#         teams[4],
#         teams[5],
#         'チーム勝敗',
#         'チーム順位'
#     )
#     print(win_loss_str)
#     win_loss_str = "| {} | {} | {} | {} | {} | {} | {} | {} | {} |".format(
#         '----:',
#         ':---:',
#         ':---:',
#         ':---:',
#         ':---:',
#         ':---:',
#         ':---:',
#         ':---:',
#         ':---:',
#     )
#     print(win_loss_str)

#     for team in teams:
#         logging.debug(team)

#         win_loss = []
#         team_win = 0
#         team_loss = 0
#         for oteam in teams:
#             if team == oteam:
#                 win_loss.append('---')
#                 continue

#             # Extract wins and losses
#             # df_win = df[(df['あなたのチームは？'] == team) & (df['対戦相手は？'] == oteam)]
#             # df_win = df_win[df_win['ダブルスの結果 [あなた]'] == 6]
#             df_win = df[(df['あなたのチームは？'] == team) & (df['対戦相手は？'] == oteam) & (df['ダブルスの結果 [あなた]'] == 6)]
#             logging.debug(df_win)
#             num_win = len(df_win)
#             logging.debug("num_win: {}".format(num_win))
#             num_loss = len(df[(df['あなたのチームは？'] == team) & (df['対戦相手は？'] == oteam) & (df['ダブルスの結果 [対戦相手]'] == 6)])
#             num_win_alt = len(df[(df['あなたのチームは？'] == oteam) & (df['対戦相手は？'] == team) & (df['ダブルスの結果 [対戦相手]'] == 6)])
#             num_loss_alt = len(df[(df['あなたのチームは？'] == oteam) & (df['対戦相手は？'] == team) & (df['ダブルスの結果 [あなた]'] == 6)])
#             num_win = num_win + num_win_alt
#             num_loss = num_loss + num_loss_alt

#             win_loss_str = "{}-{}".format(num_win, num_loss)

#             # count games if even
#             if num_win == num_loss:
#                 df_games = df[(df['あなたのチームは？'] == team) & (df['対戦相手は？'] == oteam)].sum()
#                 num_games = df_games['ダブルスの結果 [あなた]']
#                 num_ogames = df_games['ダブルスの結果 [対戦相手]']
#                 logging.debug('num_games: {}'.format(num_games))

#                 df_games_alt = df[(df['あなたのチームは？'] == oteam) & (df['対戦相手は？'] == team)].sum()
#                 num_games_alt = df_games_alt['ダブルスの結果 [対戦相手]']
#                 num_ogames_alt = df_games_alt['ダブルスの結果 [あなた]']
#                 logging.debug('num_games_alt: {}'.format(num_games_alt))

#                 num_games = num_games + num_games_alt
#                 num_ogames = num_ogames + num_ogames_alt

#                 win_loss_str = "{} ({}-{})".format(win_loss_str, int(num_games), int(num_ogames))
                
#             win_loss.append(win_loss_str)

#             # calc team win loss
#             if (num_win + num_loss) > 2:
#                 if num_win > num_loss:
#                     team_win += 1
#                 if num_win < num_loss:
#                     team_loss += 1
            
#             # case: 2-2
#             if (num_win == 2) and (num_loss == 2):
#                 if num_games > num_ogames:
#                     team_win +=1
#                 if num_games < num_ogames:
#                     team_loss += 1

#         team_win_loss = "{}-{}".format(team_win, team_loss)
#         team_rank = '--'

#         #logging.debug(df[df['あなたのチームは？'] == team])
#         win_loss_str = "| {} | {} | {} | {} | {} | {} | {} | {} | {} |".format(
#             team,
#             win_loss[0],
#             win_loss[1],
#             win_loss[2],
#             win_loss[3],
#             win_loss[4],
#             win_loss[5],
#             team_win_loss,
#             team_rank
#         )
#         print(win_loss_str)

#     sys.exit()

# def get_results(config, df):
#     # page header
#     print('# 試合結果(2部)')
#     print('')

#     # table header
#     title_str = "| {} | {} | {} | {} | {} |".format(
#         '対戦日',
#         '選手',
#         'スコア',
#         '対戦相手',
#         'コメント'
#     )
#     print(title_str)
    
#     title_str = "| {} | {} | {} | {} | {} |".format(
#         ':---:',
#         '----:',
#         ':---:',
#         ':----',
#         ':----'
#     )
#     print(title_str)
    
#     # format results
#     md_rows = []
#     for index, row in df.iterrows():
#         # print("index: {}".format(index))
#         # print("row: {}".format(row))
#         player = row[1]
#         opponent = row[2]
#         games = row[3]
#         ogames = row[4]
#         comment = row[5]
#         mday = row[6]
    
#         row_str = "| {} | {} | {}-{} | {} | {} |".format(
#             mday,
#             player,
#             games,
#             ogames,
#             opponent,
#             comment 
#         )
#         md_rows.append(row_str)
#         print(row_str)

def parse_args():
    parser = argparse.ArgumentParser(
        description = '''
        Parse markdown for SSC2022 and aggregate results
        '''
    )
    parser.add_argument(
        'md',
        help='Markdown input'
    )
    parser.add_argument(
        '-c', '--config',
        help='Use another config file (default: <script_dir>/parse_md.ini'
    )
    parser.add_argument(
        '-o', '--output',
        default='output.csv',
        help='Output CSV name (default: output.csv'
    )
    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='Verbose mode'
    )
    parser.add_argument(
        '-D', '--Debug',
        action='store_true',
        help='Debug mode'
    )

    args = parser.parse_args()

    if not os.path.isfile(args.md):
        raise Exception('{} does not exist.'.format(args.csv))
    
    return args

if __name__ == '__main__':
    main()
